{"ast":null,"code":"import _assertThisInitialized from \"C:\\\\Users\\\\chroe\\\\go\\\\src\\\\github.com\\\\sezzle-calculator\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _classCallCheck from \"C:\\\\Users\\\\chroe\\\\go\\\\src\\\\github.com\\\\sezzle-calculator\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\chroe\\\\go\\\\src\\\\github.com\\\\sezzle-calculator\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\chroe\\\\go\\\\src\\\\github.com\\\\sezzle-calculator\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\chroe\\\\go\\\\src\\\\github.com\\\\sezzle-calculator\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\chroe\\\\go\\\\src\\\\github.com\\\\sezzle-calculator\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\chroe\\\\go\\\\src\\\\github.com\\\\sezzle-calculator\\\\src\\\\App.js\";\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).apply(this, arguments));\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Calculator, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nvar MathLog =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(MathLog, _React$Component2);\n\n  function MathLog(props) {\n    var _this;\n\n    _classCallCheck(this, MathLog);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MathLog).call(this, props)); //stores the history of calculations done by this client and others\n\n    _this.props.mathLog = [];\n    return _this;\n  }\n\n  _createClass(MathLog, [{\n    key: \"render\",\n    value: function render() {\n      //the mathLog is reversed only for rendering since it's easier to store it the way it is\n      var reverseLog = this.props.mathLog.slice(0).reverse();\n      var list = reverseLog.map(function (math, num) {\n        return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19\n          },\n          __self: this\n        }, math);\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, list);\n    }\n  }]);\n\n  return MathLog;\n}(React.Component);\n\nvar Calculator =\n/*#__PURE__*/\nfunction (_React$Component3) {\n  _inherits(Calculator, _React$Component3);\n\n  function Calculator(props) {\n    var _this2;\n\n    _classCallCheck(this, Calculator);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Calculator).call(this, props));\n    _this2.state = {\n      mathLog: []\n    };\n    _this2.submit = _this2.submit.bind(_assertThisInitialized(_assertThisInitialized(_this2))); //the server responds to this post request with it's version of mathLog\n    //this should only run once per client\n\n    $.post(\"/first-post/\", {}, function (data) {\n      //remove empty math logs\n      for (var i = 0; i < 10; i++) {\n        if (data.mathLog[i] == \"\") {\n          data.mathLog.splice(i);\n          break;\n        }\n      }\n\n      _this2.setState({\n        mathLog: data.mathLog\n      });\n    }, \"json\"); //this listens to Server-Sent Events from /stream and adds the data from those to mathLog\n\n    var source = new EventSource(\"http://localhost:10000/stream\");\n    source.addEventListener(\"message\", function (e) {\n      var pushed = _this2.state.mathLog.concat(e.data);\n\n      if (pushed.length > 10) {\n        //when it goes past 10, start trimming the first elements of the array off\n        pushed.splice(0, 1);\n      }\n\n      _this2.setState({\n        mathLog: pushed\n      });\n    }, false);\n    return _this2;\n  }\n\n  _createClass(Calculator, [{\n    key: \"submit\",\n    value: function submit(e) {\n      e.preventDefault();\n      var form = new FormData(e.target);\n      var mathMessage = form.get(\"mathInput\"); //matches squences of decimal/integers (# or #.#) joined by +,-,*,/\n\n      var arithmeticRegex = /^(\\d+(\\.\\d+)?)([-+*/](\\d+(\\.\\d+)?))*$/; //this error handling should probably be done on the server\n\n      if (!mathMessage.match(arithmeticRegex)) {\n        console.log(\"bad math\");\n        return;\n      } //oooo spooky eval\n\n\n      var answer = eval(mathMessage);\n      mathMessage += \" = \" + answer;\n      document.getElementById(\"mathInput\").value = \"\";\n      $.post(\"/calculator-post/\", {\n        mathToServer: mathMessage\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \"Calculator\"), React.createElement(\"form\", {\n        autocomplete: \"off\",\n        onSubmit: this.submit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        id: \"mathInput\",\n        name: \"mathInput\",\n        placeholder: \"feed me math\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"=\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      })), React.createElement(MathLog, {\n        mathLog: this.state.mathLog,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Calculator;\n}(React.Component);\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 101\n  },\n  __self: this\n}), document.getElementById(\"app\"));","map":{"version":3,"sources":["C:\\Users\\chroe\\go\\src\\github.com\\sezzle-calculator\\src\\App.js"],"names":["App","React","Component","MathLog","props","mathLog","reverseLog","slice","reverse","list","map","math","num","Calculator","state","submit","bind","$","post","data","i","splice","setState","source","EventSource","addEventListener","e","pushed","concat","length","preventDefault","form","FormData","target","mathMessage","get","arithmeticRegex","match","console","log","answer","eval","document","getElementById","value","mathToServer","ReactDOM","render"],"mappings":";;;;;;;;IAAMA,G;;;;;;;;;;;;;6BACI;AACR,aAAO,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACA;;;;EAHgBC,KAAK,CAACC,S;;IAOlBC,O;;;;;AACL,mBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AAClB,iFAAMA,KAAN,GADkB,CAElB;;AACA,UAAKA,KAAL,CAAWC,OAAX,GAAqB,EAArB;AAHkB;AAIlB;;;;6BAEQ;AACR;AACA,UAAMC,UAAU,GAAG,KAAKF,KAAL,CAAWC,OAAX,CAAmBE,KAAnB,CAAyB,CAAzB,EAA4BC,OAA5B,EAAnB;AACA,UAAMC,IAAI,GAAGH,UAAU,CAACI,GAAX,CAAe,UAACC,IAAD,EAAOC,GAAP,EAAe;AAC1C,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAID,IAAJ,CAAP;AACA,OAFY,CAAb;AAGA,aACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAMF,IAAN,CADD;AAGA;;;;EAhBoBR,KAAK,CAACC,S;;IAoBtBW,U;;;;;AACL,sBAAYT,KAAZ,EAAmB;AAAA;;AAAA;;AAClB,qFAAMA,KAAN;AACA,WAAKU,KAAL,GAAa;AACZT,MAAAA,OAAO,EAAE;AADG,KAAb;AAGA,WAAKU,MAAL,GAAc,OAAKA,MAAL,CAAYC,IAAZ,wDAAd,CALkB,CAOlB;AACA;;AACAC,IAAAA,CAAC,CAACC,IAAF,CACC,cADD,EAEC,EAFD,EAGC,UAAAC,IAAI,EAAI;AACP;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC5B,YAAID,IAAI,CAACd,OAAL,CAAae,CAAb,KAAmB,EAAvB,EAA2B;AAC1BD,UAAAA,IAAI,CAACd,OAAL,CAAagB,MAAb,CAAoBD,CAApB;AACA;AACA;AACD;;AACD,aAAKE,QAAL,CAAc;AAACjB,QAAAA,OAAO,EAAEc,IAAI,CAACd;AAAf,OAAd;AACA,KAZF,EAaC,MAbD,EATkB,CAyBlB;;AACA,QAAIkB,MAAM,GAAG,IAAIC,WAAJ,CAAgB,+BAAhB,CAAb;AACAD,IAAAA,MAAM,CAACE,gBAAP,CAAwB,SAAxB,EAAmC,UAAAC,CAAC,EAAI;AACvC,UAAIC,MAAM,GAAG,OAAKb,KAAL,CAAWT,OAAX,CAAmBuB,MAAnB,CAA0BF,CAAC,CAACP,IAA5B,CAAb;;AACA,UAAIQ,MAAM,CAACE,MAAP,GAAgB,EAApB,EAAwB;AACvB;AACAF,QAAAA,MAAM,CAACN,MAAP,CAAc,CAAd,EAAiB,CAAjB;AACA;;AACD,aAAKC,QAAL,CAAc;AAACjB,QAAAA,OAAO,EAAEsB;AAAV,OAAd;AACA,KAPD,EAOG,KAPH;AA3BkB;AAmClB;;;;2BAEMD,C,EAAG;AACTA,MAAAA,CAAC,CAACI,cAAF;AACA,UAAIC,IAAI,GAAG,IAAIC,QAAJ,CAAaN,CAAC,CAACO,MAAf,CAAX;AACA,UAAIC,WAAW,GAAGH,IAAI,CAACI,GAAL,CAAS,WAAT,CAAlB,CAHS,CAIT;;AACA,UAAIC,eAAe,GAAG,uCAAtB,CALS,CAMT;;AACA,UAAI,CAACF,WAAW,CAACG,KAAZ,CAAkBD,eAAlB,CAAL,EAAyC;AACxCE,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA;AACA,OAVQ,CAWT;;;AACA,UAAIC,MAAM,GAAGC,IAAI,CAACP,WAAD,CAAjB;AACAA,MAAAA,WAAW,IAAI,QAAQM,MAAvB;AACAE,MAAAA,QAAQ,CAACC,cAAT,CAAwB,WAAxB,EAAqCC,KAArC,GAA6C,EAA7C;AACA3B,MAAAA,CAAC,CAACC,IAAF,CACC,mBADD,EAEC;AAAC2B,QAAAA,YAAY,EAAEX;AAAf,OAFD;AAIA;;;6BAES;AACP,aACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADD,EAEC;AAAM,QAAA,YAAY,EAAC,KAAnB;AAAyB,QAAA,QAAQ,EAAE,KAAKnB,MAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,EAAE,EAAC,WAAtB;AAAkC,QAAA,IAAI,EAAC,WAAvC;AAAmD,QAAA,WAAW,EAAC,cAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,EAEC;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,KAAK,EAAC,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFD,CAFD,EAMC,oBAAC,OAAD;AAAS,QAAA,OAAO,EAAE,KAAKD,KAAL,CAAWT,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAND,CADC;AAUD;;;;EAtEsBJ,KAAK,CAACC,S;;AAyE/B4C,QAAQ,CAACC,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBL,QAAQ,CAACC,cAAT,CAAwB,KAAxB,CAAzB","sourcesContent":["class App extends React.Component {\n\trender() {\n\t\treturn <Calculator/>;\n\t}\n}\n\n\nclass MathLog extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t//stores the history of calculations done by this client and others\n\t\tthis.props.mathLog = [];\n\t}\n\n\trender() {\n\t\t//the mathLog is reversed only for rendering since it's easier to store it the way it is\n\t\tconst reverseLog = this.props.mathLog.slice(0).reverse();\n\t\tconst list = reverseLog.map((math, num) => {\n\t\t\treturn <p>{math}</p>\n\t\t});\n\t\treturn (\n\t\t\t<div>{list}</div>\n\t\t);\n\t}\n}\n\n\nclass Calculator extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tmathLog: [],\n\t\t}\n\t\tthis.submit = this.submit.bind(this);\n\n\t\t//the server responds to this post request with it's version of mathLog\n\t\t//this should only run once per client\n\t\t$.post(\n\t\t\t\"/first-post/\",\n\t\t\t{},\n\t\t\tdata => {\n\t\t\t\t//remove empty math logs\n\t\t\t\tfor (let i = 0; i < 10; i++) {\n\t\t\t\t\tif (data.mathLog[i] == \"\") {\n\t\t\t\t\t\tdata.mathLog.splice(i)\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.setState({mathLog: data.mathLog});\n\t\t\t},\n\t\t\t\"json\"\n\t\t);\n\n\t\t//this listens to Server-Sent Events from /stream and adds the data from those to mathLog\n\t\tlet source = new EventSource(\"http://localhost:10000/stream\");\n\t\tsource.addEventListener(\"message\", e => {\n\t\t\tlet pushed = this.state.mathLog.concat(e.data);\n\t\t\tif (pushed.length > 10) {\n\t\t\t\t//when it goes past 10, start trimming the first elements of the array off\n\t\t\t\tpushed.splice(0, 1);\n\t\t\t}\n\t\t\tthis.setState({mathLog: pushed});\n\t\t}, false);\n\t}\n\n\tsubmit(e) {\n\t\te.preventDefault();\n\t\tlet form = new FormData(e.target);\n\t\tlet mathMessage = form.get(\"mathInput\");\n\t\t//matches squences of decimal/integers (# or #.#) joined by +,-,*,/\n\t\tlet arithmeticRegex = /^(\\d+(\\.\\d+)?)([-+*/](\\d+(\\.\\d+)?))*$/;\n\t\t//this error handling should probably be done on the server\n\t\tif (!mathMessage.match(arithmeticRegex)) {\n\t\t\tconsole.log(\"bad math\");\n\t\t\treturn;\n\t\t}\n\t\t//oooo spooky eval\n\t\tlet answer = eval(mathMessage);\n\t\tmathMessage += \" = \" + answer;\n\t\tdocument.getElementById(\"mathInput\").value = \"\";\n\t\t$.post(\n\t\t\t\"/calculator-post/\",\n\t\t\t{mathToServer: mathMessage},\n\t\t);\n\t}\n\t\n  render() {\n    return (\n\t\t\t<div>\n\t\t\t\t<h1>Calculator</h1>\n\t\t\t\t<form autocomplete=\"off\" onSubmit={this.submit}>\n\t\t\t\t\t<input type=\"text\" id=\"mathInput\" name=\"mathInput\" placeholder=\"feed me math\"/>\n\t\t\t\t\t<input type=\"submit\" value=\"=\"/>\n\t\t\t\t</form>\n\t\t\t\t<MathLog mathLog={this.state.mathLog}/>\n\t\t\t</div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById(\"app\"));\n"]},"metadata":{},"sourceType":"module"}